# -*- coding: utf-8 -*-
"""
Created on Thu Oct 13 11:00:42 2022

@author: tjwjd
"""

# 다이나믹 프로그래밍
# : 한 번 계산한 문제는 다시 계산하지 않도록 하는 알고리즘

# 피보나치 함수 소스코드(재귀함수)
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x-1) + fibo(x-2)

print(fibo(4))

# 이때 n의 값이 커지면 수행시간이 기하급수적으로 늘어나기 때문에 연산을 진행하기 어려움
# => 다이나믹 프로그래밍 사용
# 1. 큰 문제를 작은 문제로 나눌 수 있다.
# 2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.
# ==> 메모이제이션 / 캐싱


# 피보나치 수열 소스코드(재귀적)
# 한 번 계산된 결과를 메모이제이션하기 위한 리스트 초기화
d = [0] * 100

# 피보나치 함수를 재귀함수로 구현(탑 다운 다이나믹 프로그래밍)
def fibo(x):
    # 종료 조건
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계싼하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x-1) + fibo(x-2)
    return d[x]

print(fibo(99))

##############################################################################################################
#%%

# 2. 1로 만들기

x = int(input())

# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화
d = [0] * 30001

# 다이나믹 프로그래밍 진행
for i in range(2, x+1):
    # 현재의 수에서 1을 빼는 경우
    d[i] = d[i-1] + 1
    # 현재의 수가 2로 나누어 떨어지는 경우
    if i % 2 == 0:
        d[i] = min(d[i], d[i//2]+1)
    # 현재의 수가 2로 나누어 떨어지는 경우
    
























